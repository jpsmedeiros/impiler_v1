Documentação da sintaxe dos arquivos .pest: https://docs.rs/pest_derive/1.0.8/pest_derive/#Grammar

1.0 - Definindo número, inteiro e digito
    num = @{ int ~ ("." ~ digit*)? ~ (^"e" ~ int)? }
        int = { ("+" | "-")? ~ digit+ }
        digit = { '0'..'9' }

    1.1 - Digito
        * Um dígito é um caractere numérico entre 0 e 9
            ==> '0'..'9'
    1.2 - Inteiro
        * Um inteiro tem opcionalmente um símbolo "+" ou "-"
            ==> ("+" | "-")?
        * Seguido de
            ==> ~
        * Um ou mais digitos
            ==> digit+

    1.3 - Número
        * É uma regra atômica
            ==> @
        * Um número primeiramente é composto de um inteiro
            ==> int
        * Seguido opcionalmente de um ponto (".") seguido por zero seguido por digitos
            ==> ~ ("." ~ digit*)?
        * Seguido opcionalmente da parte exponêncial
            ==> ~ (^"e" ~ int)?

2.0 - Definindo operações aritméticas
    
    operation = _{ add | subtract | multiply | divide | power }
        add      = { "+" }
        subtract = { "-" }
        multiply = { "*" }
        divide   = { "/" }
        power    = { "^" }

    2.1 - Adição, subtração, multiplicação, divisão e elevação
        * São definidos pelos dados símbolos
            ==> "+", "-", "*", "/", "^", respectivamente
    2.2 - Operação
        * É uma regra silenciosa (?)
            ==> _
        * Pode ser uma adição ou subtração ou multiplicação ou divisão ou elevação
            ==> add | subtract | multiply | divide | power

3.0 - Definindo termos e expressões
    expr = { term ~ (operation ~ term)* }
    term = _{ num | "(" ~ expr ~ ")" }

    3.1 - Termo
        * É uma regra silenciosa
            ==> _
        * Um termo pode ser um número
            ==> num
        * Ou uma expressão entre parênteses
            ==> | "(" ~ expr ~ ")"
    3.2 - Expressão
        * Uma expressão pode ser um termo
            ==> term
        * Seguido por zero ou mais operações seguidas por termos
            ==> ~ (operation ~ term)*

4.0 - Calculation
    calculation = _{ soi ~ expr ~ eoi }

    * Sinaliza o início do input (start-of-input(soi))
        ==> soi
    * Seguido de uma expressão
        ==> ~ expr
    * Seguido da sinalização do final do input (end-of-input(eoi))
        ==> ~ eoi